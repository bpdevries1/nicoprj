(* from https://cs.wmich.edu/~gupta/teaching/cs4850/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm *)
(* some syntax errors in orig: logical-or-expression, logical-and-expression *)
(* maybe useful too: https://www.lysator.liu.se/c/ANSI-C-grammar-y.html and http://www.quut.com/c/ANSI-C-grammar-y.html *)

(* only one place at the start where ows can occur before a terminal/something *)
start-parse ::= <ows> translation-unit

(*
translation-unit ::= external-declaration
	| translation-unit external-declaration
*)

(* met deze meer sequentieel, minder diepe tree *)
translation-unit ::= external-declaration+

external-declaration ::= function-definition | declaration | preproc

(* [2017-01-01 12:00] Nog 2 varianten erbij zonder de decl-spec, bv int, nodig voor Actions *)
function-definition	::= declaration-specifiers declarator declaration-list compound-statement
	| declaration-specifiers declarator compound-statement
	| declarator declaration-list compound-statement
	| declarator compound-statement

(* van http://www.quut.com/c/ANSI-C-grammar-y.html, een yacc spec:

Dit is bijna letterlijk hetzelfde.

*)

(* [2017-01-01 11:59] Kan hier zeggen dat het niets mag zijn, maar werkt niet zo goed, en wil dit ook alleen vanuit function-def, dus daar oplossen *)
declaration-specifiers ::= storage-class-specifier declaration-specifiers
	| storage-class-specifier
	| type-specifier declaration-specifiers
	| type-specifier
	| type-qualifier declaration-specifiers
	| type-qualifier
	| function-specifier declaration-specifiers
	| function-specifier
	| alignment-specifier declaration-specifiers
	| alignment-specifier

alignment-specifier	::= 'alignas' <ows> '(' <ows> type-name ')' <ows>
	| 'alignas' <ows> '(' <ows> constant-expression ')' <ows>

function-specifier ::= 'inline' <ows> | 'noreturn' <ows>

declaration-list 	::= declaration
	| declaration-list declaration


<storage-class-specifier> ::= 'auto' <ows>
                            | 'register' <ows>
                            | 'static' <ows>
                            | 'extern' <ows>
                            | 'typedef' <ows>
                            | 'thread-local' <ows>

<type-specifier> ::= 'void' <ows>
                   | 'char' <ows>
                   | 'short' <ows>
                   | 'int' <ows>
                   | 'long' <ows>
                   | 'float' <ows>
                   | 'double' <ows>
                   | 'signed' <ows>
                   | 'unsigned' <ows>
                   | 'bool' <ows>
                   | 'complex' <ows>
                   | 'imaginary' <ows>
                   | <struct-or-union-specifier>
                   | <enum-specifier>
                   | <typedef-name>
                   | atomic-type-specifier

<typedef-name> ::= <identifier> <ows> 

atomic-type-specifier ::= 'atomic' <ows> '(' <ows> type-name ')' <ows>

struct-or-union-specifier ::= struct-or-union '{' <ows> struct-declaration-list '}' <ows>
	| struct-or-union identifier <ows> '{' <ows> struct-declaration-list '}' <ows>
	| struct-or-union identifier <ows>

struct-declaration-list ::= struct-declaration
	| struct-declaration-list struct-declaration

<struct-or-union> ::= 'struct' <ows>
                    | 'union' <ows>

struct-declaration ::=specifier-qualifier-list ';' <ows>	
	| specifier-qualifier-list struct-declarator-list ';' <ows>
	| static-assert-declaration
	
specifier-qualifier-list ::=type-specifier specifier-qualifier-list
	| type-specifier
	| type-qualifier specifier-qualifier-list
	| type-qualifier

static-assert-declaration ::= 'static-assert' <ows>  '(' <ows> constant-expression ',' <ows> string <ows> ')' <ows> ';' <ows>

<struct-declarator-list> ::= <struct-declarator>
                           | <struct-declarator-list> ',' <ows> <struct-declarator>

<struct-declarator> ::= <declarator>
                      | <declarator> ':' <ows> <constant-expression>
                      | ':' <ows> <constant-expression>

declarator	::= pointer direct-declarator
	| direct-declarator

pointer	::= '*' <ows> type-qualifier-list pointer
	| '*' <ows> type-qualifier-list
	| '*' <ows> pointer
	| '*' <ows>

type-qualifier-list ::=type-qualifier
	| type-qualifier-list type-qualifier

<type-qualifier> ::= 'const' <ows>
                   | 'volatile' <ows> | 'atomic' <ows> | 'restrict' <ows>

direct-declarator ::= identifier <ows>
	| '(' <ows> declarator ')' <ows>
	| direct-declarator '[' <ows> ']' <ows>
	| direct-declarator '[' <ows> '*' <ows> ']' <ows>
	| direct-declarator '[' <ows> 'static' <ows> type-qualifier-list assignment-expression ']' <ows>
	| direct-declarator '[' <ows> 'static' <ows> assignment-expression ']' <ows>
	| direct-declarator '[' <ows> type-qualifier-list '*' <ows> ']' <ows>
	| direct-declarator '[' <ows> type-qualifier-list 'static' <ows> assignment-expression ']' <ows>
	| direct-declarator '[' <ows> type-qualifier-list assignment-expression ']' <ows>
	| direct-declarator '[' <ows> type-qualifier-list ']' <ows>
	| direct-declarator '[' <ows> assignment-expression ']' <ows>
	| direct-declarator '(' <ows> parameter-type-list ')' <ows>
	| direct-declarator '(' <ows> ')' <ows>
	| direct-declarator '(' <ows> identifier-list ')' <ows>
	                      
type-qualifier-list ::=type-qualifier
	| type-qualifier-list type-qualifier

identifier-list ::= identifier <ows>
	| identifier-list ',' <ows> identifier <ows>

<constant-expression> ::= <conditional-expression>

<conditional-expression> ::= <logical-or-expression>
                           | <logical-or-expression> '?' <ows> <expression> ':' <ows> <conditional-expression>

<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression> '||' <ows> <logical-and-expression>

<logical-and-expression> ::= <inclusive-or-expression>
                           | <logical-and-expression> '&&' <ows> <inclusive-or-expression>

<inclusive-or-expression> ::= <exclusive-or-expression>
                            | <inclusive-or-expression> '|' <ows> <exclusive-or-expression>

<exclusive-or-expression> ::= <and-expression>
                            | <exclusive-or-expression> '^' <ows> <and-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> '&' <ows> <equality-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> '==' <ows> <relational-expression>
                        | <equality-expression> '!=' <ows> <relational-expression>

<relational-expression> ::= <shift-expression>
                          | <relational-expression> '<' <ows> <shift-expression>
                          | <relational-expression> '>' <ows> <shift-expression>
                          | <relational-expression> '<=' <ows> <shift-expression>
                          | <relational-expression> '>=' <ows> <shift-expression>

<shift-expression> ::= <additive-expression>
                     | <shift-expression> '<<' <ows> <additive-expression>
                     | <shift-expression> '>>' <ows> <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> '+' <ows> <multiplicative-expression>
                        | <additive-expression> '-' <ows> <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> '*' <ows> <cast-expression>
                              | <multiplicative-expression> '/' <ows> <cast-expression>
                              | <multiplicative-expression> '%' <ows> <cast-expression>

<cast-expression> ::= <unary-expression>
                    | '(' <ows> <type-name> ')' <ows> <cast-expression>

<unary-expression> ::= <postfix-expression>
                     | '++' <ows> <unary-expression>
                     | '--' <ows> <unary-expression>
                     | <unary-operator> <cast-expression>
                     | 'sizeof' <ows> <unary-expression>
                     | 'sizeof' <ows> '(' <ows> <type-name> ')' <ows>
                     | 'alignof' <ows> '(' <ows> <type-name> ')' <ows>

postfix-expression	::= primary-expression
	| postfix-expression '[' <ows> expression ']' <ows>
	| postfix-expression '(' <ows> ')' <ows>
	| postfix-expression '(' <ows> argument-expression-list ')' <ows>
	| postfix-expression '.' <ows> identifier <ows>
	| postfix-expression '->' <ows> identifier <ows>
	| postfix-expression '++' <ows>
	| postfix-expression '--' <ows>
	| '(' <ows> type-name ')' <ows> '{' <ows> initializer-list '}' <ows>
	| '(' <ows> type-name ')' <ows> '{' <ows> initializer-list ',' <ows> '}' <ows>

<primary-expression> ::= <identifier> <ows> 
                       | <constant>
                       | <string> <ows> 
                       | '(' <ows> <expression> ')' <ows>
                       | generic-selection

generic-selection ::='generic' <ows>  '(' <ows> assignment-expression ',' <ows> generic-assoc-list ')' <ows>

generic-assoc-list ::= generic-association
	| generic-assoc-list ',' <ows> generic-association

generic-association ::=type-name ':' <ows> assignment-expression
	| 'default' <ows> ':' <ows> assignment-expression

<constant> ::= <floating-constant> <ows> 
             | <integer-constant> <ows> 
             | <character-constant> <ows> 
             | <enumeration-constant> 

<expression> ::= <assignment-expression>
               | <expression> ',' <ows> <assignment-expression>

<assignment-expression> ::= <conditional-expression>
                          | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= '=' <ows>
                        | '*=' <ows>
                        | '/=' <ows>
                        | '%=' <ows>
                        | '+=' <ows>
                        | '-=' <ows>
                        | '<<=' <ows>
                        | '>>=' <ows>
                        | '&=' <ows>
                        | '^=' <ows>
                        | '|=' <ows>

<unary-operator> ::= '&' <ows>
                   | '*' <ows>
                   | '+' <ows>
                   | '-' <ows>
                   | '~' <ows>
                   | '!' <ows>

type-name ::= specifier-qualifier-list abstract-declarator
	| specifier-qualifier-list

<parameter-type-list> ::= <parameter-list>
                        | <parameter-list> ',' <ows> '...' <ows>

<parameter-list> ::= <parameter-declaration>
                   | <parameter-list> ',' <ows> <parameter-declaration>

<parameter-declaration> ::= declaration-specifiers <declarator>
                          | declaration-specifiers <abstract-declarator>
                          | declaration-specifiers

<abstract-declarator> ::= <pointer>
                        | <pointer> <direct-abstract-declarator>
                        | <direct-abstract-declarator>

(* orig:  '(' <ows> parameter-type-list>|? ), so replaced | with '}' <ows> *)

direct-abstract-declarator ::= '(' <ows> abstract-declarator ')' <ows>
	| '[' <ows> ']' <ows>
	| '[' <ows> '*' <ows> ']' <ows>
	| '[' <ows> 'static' <ows> type-qualifier-list assignment-expression ']' <ows>
	| '[' <ows> 'static' <ows> assignment-expression ']' <ows>
	| '[' <ows> type-qualifier-list 'static' <ows> assignment-expression ']' <ows>
	| '[' <ows> type-qualifier-list assignment-expression ']' <ows>
	| '[' <ows> type-qualifier-list ']' <ows>
	| '[' <ows> assignment-expression ']' <ows>
	| direct-abstract-declarator '[' <ows> ']' <ows>
	| direct-abstract-declarator '[' <ows> '*' <ows> ']' <ows>
	| direct-abstract-declarator '[' <ows> 'static' <ows> type-qualifier-list assignment-expression ']' <ows>
	| direct-abstract-declarator '[' <ows> 'static' <ows> assignment-expression ']' <ows>
	| direct-abstract-declarator '[' <ows> type-qualifier-list assignment-expression ']' <ows>
	| direct-abstract-declarator '[' <ows> type-qualifier-list 'static' <ows> assignment-expression ']' <ows>
	| direct-abstract-declarator '[' <ows> type-qualifier-list ']' <ows>
	| direct-abstract-declarator '[' <ows> assignment-expression ']' <ows>
	| '(' <ows> ')' <ows>
	| '(' <ows> parameter-type-list ')' <ows>
	| direct-abstract-declarator '(' <ows> ')' <ows>
	| direct-abstract-declarator '(' <ows> parameter-type-list ')' <ows>

enum-specifier	::= 'enum' <ows> '{' <ows> enumerator-list '}' <ows>
	| 'enum' <ows> '{' <ows> enumerator-list ',' <ows> '}' <ows>
	| 'enum' <ows> identifier <ows> '{' <ows> enumerator-list '}' <ows>
	| 'enum' <ows> identifier <ows> '{' <ows> enumerator-list ',' <ows> '}' <ows>
	| 'enum' <ows> identifier <ows>

<enumerator-list> ::= <enumerator>
                    | <enumerator-list> ',' <ows> <enumerator>

enumerator	 ::= enumeration-constant '=' <ows> constant-expression
	| enumeration-constant

declaration	::= declaration-specifiers ';' <ows>
	| declaration-specifiers init-declarator-list ';' <ows>
	| static-assert-declaration

init-declarator-list ::= init-declarator
	| init-declarator-list ',' <ows> init-declarator

<init-declarator> ::= <declarator>
                    | <declarator> '=' <ows> <initializer>

<initializer> ::= <assignment-expression>
                | '{' <ows> <initializer-list> '}' <ows>
                | '{' <ows> <initializer-list> ',' <ows> '}' <ows>

initializer-list	::= designation initializer
	| initializer
	| initializer-list ',' <ows> designation initializer
	| initializer-list ',' <ows> initializer

designation	::= designator-list '=' <ows>

designator-list ::=designator
	| designator-list designator

designator ::= '[' <ows> constant-expression ']' <ows>
	| '.' <ows> identifier <ows>


(* [2016-12-31 22:34] paar rules al eerder moeten toevoegen, nu alsnog *)
argument-expression-list ::= assignment-expression
	| argument-expression-list ',' <ows> assignment-expression

compound-statement	::= '{' <ows> '}' <ows>
	| '{' <ows>  block-item-list '}' <ows>

(*
block-item-list	::= block-item
	| block-item-list block-item
*)

block-item-list	::= block-item+

block-item ::=declaration
	| statement
	| preproc

preproc ::= '#' <ows> #'[^\n\r]+\r?\n' <ows> 

statement ::= labeled-statement
              | expression-statement
              | compound-statement
              | selection-statement
              | iteration-statement
              | jump-statement

<labeled-statement> ::= <identifier> <ows>  ':' <ows> <statement>
                      | 'case' <ows> <constant-expression> ':' <ows> <statement>
                      | 'default' <ows> ':' <ows> <statement>

expression-statement	::= ';' <ows>
	| expression ';' <ows>

selection-statement ::= 'if' <ows> '(' <ows> expression ')' <ows> statement
                        | 'if' <ows> '(' <ows> expression ')' <ows> statement 'else' <ows> statement
                        | 'switch' <ows> '(' <ows> expression ')' <ows> statement

iteration-statement	::= 'while' <ows> '(' <ows> expression ')' <ows> statement
	| 'do' <ows> statement 'while' <ows> '(' <ows> expression ')' <ows> ';' <ows>
	| 'for' <ows> '(' <ows> expression-statement expression-statement ')' <ows> statement
	| 'for' <ows> '(' <ows> expression-statement expression-statement expression ')' <ows> statement
	| 'for' <ows> '(' <ows> declaration expression-statement ')' <ows> statement
	| 'for' <ows> '(' <ows> declaration expression-statement expression ')' <ows> statement

<jump-statement> ::= 'goto' <ows> <identifier> <ows>  ';' <ows>
                   | 'continue' <ows> ';' <ows>
                   | 'break' <ows> ';' <ows>
                   | 'return' <ows> expression? ';' <ows>

(* added [2016-12-25 10:58]. 
   [2017-01-01 11:37] Hier nog keywords bijzetten? Zijn vooral nieuwe, die ik niet/weinig gebruik. *)
<keyword> ::= 'auto' | 'break' | 'case' | 'char' | 'const' | 'continue' | 'default' | 'do' | 'double' | 'else' | 'enum' | 'extern' | 'float' | 'for' | 'goto' | 'if' | 'int' | 'long' | 'register' | 'return' | 'short' | 'signed' | 'sizeof' | 'static' | 'struct' | 'switch' | 'typedef' | 'union' | 'unsigned' | 'void' | 'volatile' | 'while'

(* use look ahead extension *)
<identifier> ::= !keyword #'[A-Za-z_][A-Za-z0-9_]*'

(* eigenlijk zou  hier ook achter moeten, maar wil de whitespace niet bij de integer-constant <ows> etc hebben. Kan natuurlijk wel een string <ows> trim toepassen *)
(* [2016-12-27 20:39] 'for' <ows> now no exponential notation, is not the first thing that matches, maybe need to 'do' <ows> it outside of regexp. *)
(* <floating-constant> ::= #'[0-9]*\.[0-9]*([eE][+-]?[0-9]+)?' *)

<floating-constant> ::= #'[0-9]*\.[0-9]*'
<integer-constant> ::= #'[0-9]+'
<character-constant> ::= #'\'[^\']\''
(* <string> ::= #'\"[^\"]*\"' *)
(* <string> ::= #'"[^"]*"' *)

(* [2016-12-27 21:18] deze hieronder met regexp werkt wel voor vuser_end.c test met andere strings, maar duurt best (te?) lang voor landing.c *)
(* <string> ::= #'"([^\\"]|\\.)*"' *)
(* [2016-12-28 11:09] use chars <ows> instead of char, less memory *)

<string> ::= '"' {<chars> | <escaped-char>}* '"'
<chars> ::= #'[^\"\\\n\r]+'
<escaped-char> ::= #'\\.' <ows>

enumeration-constant ::= identifier <ows>

(* onderstaande evt ook nog doen, als je het gebruikt, anders maakt het niet uit.

"_Alignas"                              '{' <ows> 'return' <ows> ALIGNAS; '}' <ows>
"_Alignof"                              '{' <ows> 'return' <ows> ALIGNOF; '}' <ows>
"_Atomic"                               '{' <ows> 'return' <ows> ATOMIC; '}' <ows>
"_Bool"                                 '{' <ows> 'return' <ows> BOOL; '}' <ows>
"_Complex"                              '{' <ows> 'return' <ows> COMPLEX; '}' <ows>
"_Generic"                              '{' <ows> 'return' <ows> GENERIC; '}' <ows>
"_Imaginary"                            '{' <ows> 'return' <ows> IMAGINARY; '}' <ows>
"_Noreturn"                             '{' <ows> 'return' <ows> NORETURN; '}' <ows>
"_Static_assert"                        '{' <ows> 'return' <ows> STATIC_ASSERT; '}' <ows>
"_Thread_local"                         '{' <ows> 'return' <ows> THREAD_LOCAL; '}' <ows>
"__func__"                              '{' <ows> 'return' <ows> FUNC_NAME; '}' <ows>

 *)

(* handle white space, both optional (ows) and mandatory (mws) *)
(* comments should also be possible everywhere a whitespace is allowed, but want to handle this with pre-processing *)

<mws> ::= #'\s+' <ows>
(* <ows> ::= #'\s*' <ows> *)
<ows> ::= <ws-or-comments>*

(* orig from core.clj, based on auto-whitespace. This one will parse exactly one of whitespaces or a comment *)
<ws-or-comments> ::= #'\\s+' <ows> | comments
comments ::= comment+

(* second part is a single line comment, including the line ending *)
comment ::= '/*' <ows> inside-comment* '*/' <ows> | '//' <ows> #'[^\\n\\r]+\\r?\\n' <ows> 

(* everything but a star. Stars should be matched per item, every time we need to check 'if' <ows> it's not followed by a slash *)
inside-comment ::= #'[^*]+' <ows> | !'*/' <ows> '*' <ows>
     



translation-unit ::=  {external-declaration}*
external-declaration ::= function-definition | declaration
function-definition ::= declaration-specifier* <declarator> declaration* <compound-statement>
<declaration-specifier> ::= <storage-class-specifier>
<storage-class-specifier> ::= 'auto'
<type-specifier> ::= 'void'
<struct-or-union-specifier> ::= <struct-or-union> <identifier>  '{' struct-declaration+ '}'
<struct-or-union> ::= 'struct'
<struct-declaration> ::= specifier-qualifier* <struct-declarator-list>
<specifier-qualifier> ::= <type-specifier>
<struct-declarator-list> ::= <struct-declarator>
<struct-declarator> ::= <declarator>
<declarator> ::= pointer? <direct-declarator>
<pointer> ::= '*' type-qualifier* pointer?
<type-qualifier> ::= 'const'
<direct-declarator> ::= <identifier> 
direct-declarator ::=identifier
type-qualifier-list ::=type-qualifier
identifier-list ::= identifier
<constant-expression> ::= <conditional-expression>
<conditional-expression> ::= <logical-or-expression>
<logical-or-expression> ::= <logical-and-expression>
<logical-and-expression> ::= <inclusive-or-expression>
<inclusive-or-expression> ::= <exclusive-or-expression>
<exclusive-or-expression> ::= <and-expression>
<and-expression> ::= <equality-expression>
<equality-expression> ::= <relational-expression>
<relational-expression> ::= <shift-expression>
<shift-expression> ::= <additive-expression>
<additive-expression> ::= <multiplicative-expression>
<multiplicative-expression> ::= <cast-expression>
<cast-expression> ::= <unary-expression>
<unary-expression> ::= <postfix-expression>
<postfix-expression> ::= <primary-expression>
<primary-expression> ::= <identifier> 
<constant> ::= <floating-constant> 
<expression> ::= <assignment-expression>
<assignment-expression> ::= <conditional-expression>
<assignment-operator> ::= '='
<unary-operator> ::= '&'
<type-name> ::= specifier-qualifier+ abstract-declarator?
<parameter-type-list> ::= <parameter-list>
<parameter-list> ::= <parameter-declaration>
<parameter-declaration> ::= declaration-specifier+ <declarator>
<abstract-declarator> ::= <pointer>
<direct-abstract-declarator> ::=  '(' <abstract-declarator> ')'
<enum-specifier> ::= 'enum' <identifier>  '{' <enumerator-list> '}'
<enumerator-list> ::= <enumerator>
<enumerator> ::= <identifier> 
<typedef-name> ::= <identifier> 
<declaration> ::=  declaration-specifier+ init-declarator*
<init-declarator> ::= <declarator>
<initializer> ::= <assignment-expression>
<initializer-list> ::= <initializer>
<compound-statement> ::= '{' declaration* statement* '}'
(* <compound-statement> ::= '{' declaration* statement* '}' *)
<statement> ::= <labeled-statement>
<labeled-statement> ::= <identifier>  ':' <statement>
<expression-statement> ::= expression? ';'
<selection-statement> ::= 'if' '(' <expression> ')' <statement>
<iteration-statement> ::= 'while' '(' <expression> ')' <statement>
<jump-statement> ::= 'goto' <identifier>  ';'


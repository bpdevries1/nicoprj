load("~/nicoprj/tryout/R-interactive/playwith-read-only/demo/pointsTool.R")
library(playwith)
points_handler <- function(widget, playState) {
repeat {
foo <- playSelectData(playState,
prompt=paste(
"Click to add a point.",
"Ctrl-click to delete.",
"Right-click to stop."))
if (is.null(foo)) return()
xy <- xyData(playState)
if (foo$modifiers & RGtk2::GdkModifierType["control-mask"]) {
## Ctrl-click: delete data points
xy$x[foo$which] <- NA
xy$y[foo$which] <- NA
} else {
## add data point at click location
xy$x <- c(xy$x, foo$coords$x[1])
xy$y <- c(xy$y, foo$coords$y[1])
}
## store in local environment
playState$env$localxy <- xy
if (playState$is.lattice) {
## lattice plot: use formula
callArg(playState, 1) <- quote(y ~ x)
callArg(playState, "data") <- quote(localxy)
} else {
## otherwise set first argument to plot
callArg(playState, 1) <- quote(localxy)
callArg(playState, "y") <- NULL
}
playReplot(playState)
}
}
pointsTool <- list("Points", "gtk-add", "Add points",
callback = points_handler)
ydata <- c(1:4, 2:1, 5:8)
playwith(xyplot(ydata ~ 1:10, type=c("p", "smooth"), pch=8),
tools = list(pointsTool))
library(playwith)
## 1. A simple action to show a "Hello world" dialog box.
hello_handler <- function(widget, playState)
gmessage("Hello world.")
helloTool <- list("Hello", label = "Say Hello",
callback = hello_handler)
playwith(plot(1:10), tools = list(helloTool))
## 2. A toggle button to draw "G'day universe" on the plot.
## This "callback" is run when the action is activated
## (from toolbar, menu, or keyboard shortcut).
gday_handler <- function(widget, playState) {
if (widget["active"]) {
## tool was turned on: draw the text
playState$tmp$gdayActive <- TRUE
drawGday(playState)
} else {
## turned off; re-draw plot to remove text
playState$tmp$gdayActive <- FALSE
playReplot(playState)
}
}
## This is an "update action", called after plotting.
drawGday <- function(playState) {
if (isTRUE(playState$tmp$gdayActive)) {
## draw text centred on the page
grid.text("G'day universe.", gp = gpar(cex=2))
}
}
gdayTool <- list("Gday", "gtk-yes", "Draw G'day", "F5",
"Overlay text on the plot", gday_handler, FALSE,
update.action = drawGday)
playwith(plot(1:10), tools = list(gdayTool))
## Note the toolbar button (see playwith.options("custom.toolbar"))
## and item in the Tools menu (with keyboard shortcut F5).
hello_handler <- function(widget, playState)
gmessage("Hello world.")
helloTool <- list("Hello", label = "Say Hello",
callback = hello_handler)
playwith(plot(1:10), tools = list(helloTool))
hello_handler <- function(widget, playState)
gmessage("Hello world.")
helloTool <- list("Hello", label = "Say Hello",
callback = hello_handler)
playwith(plot(1:10), tools = list(helloTool))
library(playwith)
## A tool to draw a line and label it with its equation.
## The annotations are persistent and may be redrawn in other contexts.
## The actions can be reversed with "Undo" menu item or <Ctrl>Z.
## This "callback" is run when the action is activated
## (from toolbar, menu, or keyboard shortcut).
lineEq_handler <- function(widget, playState) {
## draw line at drag locations
lnInfo <- playLineInput(playState)
if (is.null(lnInfo)) return()
if (isTRUE(lnInfo$is.click)) return()
## annotation call to draw a line
lnExpr <- with(lnInfo$coords,
call("panel.segments",
x[1], y[1], x[2], y[2]))
playAnnotate(playState, lnExpr, space = lnInfo$space)
## draw equation at click location
eqInfo <- playPointInput(playState, prompt =
paste("Click to place equation,",
"Right-click to cancel."))
if (is.null(eqInfo)) return()
grad <- with(lnInfo$coords, diff(y) / diff(x))
icept <- with(lnInfo$coords, y[1] - grad * x[1])
## create the equation as an expression
eqn <- substitute(expression(y == a * x + b),
list(a = signif(grad, 3),
b = signif(icept, 3)))
## annotation call to draw text
eqExpr <- with(eqInfo$coords,
call("panel.usertext", x[1], y[1], eqn))
playAnnotate(playState, eqExpr, space = eqInfo$space)
}
lineEqTool <- list("LineEq", "gtk-indent", "Line + Eqn",
callback = lineEq_handler)
playwith(plot(1:10), tools = list(lineEqTool))
## Click on tool, drag a line, then click to place equation.
qplot(1:10)
library(ggplot2)
qplot(1:10)
playwith(qplot(1:10), tools = list(lineEqTool))
playwith(qplot(1:10), tools = list(lineEqTool))
qplot(1:10,1:10)
qplot(1:20,1:10)
qplot(1:20,1:20)
qplot(1:20,1:20)
playwith(qplot(1:20, 1:20), tools = list(lineEqTool))
lineEq_handler <- function(widget, playState) {
## draw line at drag locations
lnInfo <- playLineInput(playState)
if (is.null(lnInfo)) return()
if (isTRUE(lnInfo$is.click)) return()
## annotation call to draw a line
lnExpr <- with(lnInfo$coords,
call("panel.segments",
x[1], y[1], x[2], y[2]))
print(x[1])
print(y[1])
print(x[2])
print(y[2])
playAnnotate(playState, lnExpr, space = lnInfo$space)
## draw equation at click location
eqInfo <- playPointInput(playState, prompt =
paste("Click to place equation,",
"Right-click to cancel."))
if (is.null(eqInfo)) return()
grad <- with(lnInfo$coords, diff(y) / diff(x))
icept <- with(lnInfo$coords, y[1] - grad * x[1])
## create the equation as an expression
eqn <- substitute(expression(y == a * x + b),
list(a = signif(grad, 3),
b = signif(icept, 3)))
## annotation call to draw text
eqExpr <- with(eqInfo$coords,
call("panel.usertext", x[1], y[1], eqn))
playAnnotate(playState, eqExpr, space = eqInfo$space)
}
lineEqTool <- list("LineEq", "gtk-indent", "Line + Eqn",
callback = lineEq_handler)
playwith(qplot(1:20, 1:20), tools = list(lineEqTool))
?with
lineEq_handler <- function(widget, playState) {
## draw line at drag locations
lnInfo <- playLineInput(playState)
if (is.null(lnInfo)) return()
if (isTRUE(lnInfo$is.click)) return()
## annotation call to draw a line
lnExpr <- with(lnInfo$coords,
call("panel.segments",
x[1], y[1], x[2], y[2]))
with(lnInfo$coords, {
print(x[1])
print(y[1])
print(x[2])
print(y[2])})
playAnnotate(playState, lnExpr, space = lnInfo$space)
## draw equation at click location
eqInfo <- playPointInput(playState, prompt =
paste("Click to place equation,",
"Right-click to cancel."))
if (is.null(eqInfo)) return()
grad <- with(lnInfo$coords, diff(y) / diff(x))
icept <- with(lnInfo$coords, y[1] - grad * x[1])
## create the equation as an expression
eqn <- substitute(expression(y == a * x + b),
list(a = signif(grad, 3),
b = signif(icept, 3)))
## annotation call to draw text
eqExpr <- with(eqInfo$coords,
call("panel.usertext", x[1], y[1], eqn))
playAnnotate(playState, eqExpr, space = eqInfo$space)
}
lineEqTool <- list("LineEq", "gtk-indent", "Line + Eqn",
callback = lineEq_handler)
playwith(qplot(1:20, 1:20), tools = list(lineEqTool))
playwith(plot(1:20), tools = list(lineEqTool))
qp = qplot(1:20, 1:20)
fix(qp)
qp$scales
qp$scales2
sc=qp$scales
fix(sc)
?ggplot_build
gpb = ggplot_build(qp)
fix(gpb)
fix(gpb)
?print.ggplot
print.ggplot(qpb)
print(qpb)
print(gpb)
print(qp)
print(gpb)
grob = ggplotGrob(qp)
fix(grob)
showGrob()
sceneListing <- grid.ls(viewports=T, print=FALSE)
do.call("cbind", sceneListing)
fix(grob)
qp = qplot(1:20, 1:20)
print(qp)
current.vpTree(all=TRUE)
grid.ls(grobs=FALSE, viewports=TRUE)
grid.ls()
library(grid)
library(grid)
vignette()
library(ggmap)
library(ggmap)
df <- data.frame(xvar = 1:10, yvar = 1:10)
qplot(xvar, yvar, data = df) + annotate(geom = 'point', x = 3, y = 6)
gglocator(4)
gglocator(1)
qplot(xvar, yvar, data = df) + annotate(geom = 'point', x = 3, y = 6, log="y")
qplot(xvar, yvar, data = df, log="y") + annotate(geom = 'point', x = 3, y = 6)
gglocator(1)
gglocator(1)
help(gglocator)
gglocator
ndvloc = function (object = last_plot(), message = FALSE, xexpand = c(0.05, 0), yexpand = c(0.05, 0)) {
x <- grid.ls(print = message)[[1]]
x <- x[grep("panel-", grid.ls(print = message)[[1]])]
seekViewport(x)
loc <- as.numeric(grid.locator("npc"))
xrng <- with(object, range(data[, deparse(mapping$x)]))
yrng <- with(object, range(data[, deparse(mapping$y)]))
xrng <- scales::expand_range(range = xrng, mul = xexpand[1],
add = xexpand[2])
yrng <- scales::expand_range(range = yrng, mul = yexpand[1],
add = yexpand[2])
point <- data.frame(xrng[1] + loc[1] * diff(xrng), yrng[1] +
loc[2] * diff(yrng))
names(point) <- with(object, c(deparse(mapping$x), deparse(mapping$y)))
point
}
qplot(xvar, yvar, data = df) + annotate(geom = 'point', x = 3, y = 6)
coord = ndvloc()
rstudio::viewData(coord)
coord
grid.locator()
grid.locator()
locator()
coord = ndvloc()
coord
object = last_plot()
message = FALSE
xexpand = c(0.05, 0)
yexpand = c(0.05, 0)
x <- grid.ls(print = message)[[1]]
fix(x)
x <- x[grep("panel-", grid.ls(print = message)[[1]])]
seekViewport(x)
loc <- as.numeric(grid.locator("npc"))
fix(loc)
loc <- as.numeric(grid.locator("npc"))
fix(loc)
loc <- as.numeric(grid.locator("npc"))
fix(loc)
loc <- as.numeric(grid.locator("npc"))
fix(loc)
?seekViewport
# loc geeft 2 waarden tussen 0 en 1 van het grijze gebied
?grid.locator
?deparse
deparse(mapping$x)
deparse(object$mapping$x)
deparse(object$mapping$y)
deparse(object$mapping$z)
xrng <- with(object, range(data[, deparse(mapping$x)]))
fix(xrng)
object$range(data[, "xvar"])
object$range(object$data[, "xvar"])
object$data
object$data[, xvar]
object$data[, "xvar"]
range(object$data[, "xvar"])
object$range(object$data[, "xvar"])
range(object$data[, "xvar"])
xrng2 <- scales::expand_range(range = xrng, mul = xexpand[1],
add = xexpand[2])
fix(xrng2)
fix(xexpand)
xexpand[1]
fix(xrng)
fix(xrng2)
?scales::expand_range
fix(xrng)
fix(xrng2)
fix(xrng2)
xrng <- scales::expand_range(range = xrng, mul = xexpand[1],
add = xexpand[2])
yrng <- scales::expand_range(range = yrng, mul = yexpand[1],
add = yexpand[2])
yrng <- with(object, range(data[, deparse(mapping$y)]))
yrng <- scales::expand_range(range = yrng, mul = yexpand[1],
add = yexpand[2])
fix(yrng)
loc
loc <- as.numeric(grid.locator("npc"))
fix(loc)
point <- data.frame(xrng[1] + loc[1] * diff(xrng), yrng[1] +
loc[2] * diff(yrng))
point
diff(xrng)
fix(point)
names(point) <- with(object, c(deparse(mapping$x), deparse(mapping$y)))
fix(point)
point
playwith(plot(1:10), tools = list(lineEqTool))
library(playwith)
## A tool to draw a line and label it with its equation.
## The annotations are persistent and may be redrawn in other contexts.
## The actions can be reversed with "Undo" menu item or <Ctrl>Z.
## This "callback" is run when the action is activated
## (from toolbar, menu, or keyboard shortcut).
lineEq_handler <- function(widget, playState) {
## draw line at drag locations
lnInfo <- playLineInput(playState)
if (is.null(lnInfo)) return()
if (isTRUE(lnInfo$is.click)) return()
## annotation call to draw a line
lnExpr <- with(lnInfo$coords,
call("panel.segments",
x[1], y[1], x[2], y[2]))
with(lnInfo$coords, {
print(x[1])
print(y[1])
print(x[2])
print(y[2])})
playAnnotate(playState, lnExpr, space = lnInfo$space)
## draw equation at click location
eqInfo <- playPointInput(playState, prompt =
paste("Click to place equation,",
"Right-click to cancel."))
if (is.null(eqInfo)) return()
grad <- with(lnInfo$coords, diff(y) / diff(x))
icept <- with(lnInfo$coords, y[1] - grad * x[1])
## create the equation as an expression
eqn <- substitute(expression(y == a * x + b),
list(a = signif(grad, 3),
b = signif(icept, 3)))
## annotation call to draw text
eqExpr <- with(eqInfo$coords,
call("panel.usertext", x[1], y[1], eqn))
playAnnotate(playState, eqExpr, space = eqInfo$space)
}
lineEqTool <- list("LineEq", "gtk-indent", "Line + Eqn",
callback = lineEq_handler)
playwith(plot(1:10), tools = list(lineEqTool))
identify_handler <- function(widget, playState) {
print(widget)
print(playState)
# lnInfo <- playLineInput(playState)
ptInfo <- playPointInput(playState, prompt =
paste("Click to identify point,",
"Right-click to cancel."))
if (is.null(ptInfo)) {
print("Nothing clicked")
return()
}
print("ptInfo:")
print(ptInfo)
}
identifyTool <- list("MyIdentify", "gtk-indent", "MyIdentify",
callback = identify_handler)
playwith(plot(1:10), tools = list(identifyTool))
library(playwith)
library(ggplot2)
playwith(plot(1:10), tools = list(identifyTool))
?global
a <- "old"
test <- function () {
assign("a", "new", envir = .GlobalEnv)
}
test()
a  # display the new value
identify_handler <- function(widget, playState) {
print(widget)
print(playState)
# lnInfo <- playLineInput(playState)
ptInfo <- playPointInput(playState, prompt =
paste("Click to identify point,",
"Right-click to cancel."))
assign("ptInfo", ptInfo, envir = .GlobalEnv)
if (is.null(ptInfo)) {
print("Nothing clicked")
return()
}
print("ptInfo:")
print(ptInfo)
}
identifyTool <- list("MyIdentify", "gtk-indent", "MyIdentify",
callback = identify_handler)
playwith(plot(1:10), tools = list(identifyTool))
library(playwith)
library(ggplot2)
playwith(plot(1:10), tools = list(identifyTool))
ptInfo
fix(ptInfo)
ptInfo$ndc
class(ptInfo$ndc)
ndc = ptInfo$ndc
class(ndc)
ndc$x
ndc$y
df <- data.frame(xvar = 1:10, yvar = 1:10)
ggp = qplot(xvar, yvar, data = df) + annotate(geom = 'point', x = 3, y = 6)
ggp$data
ggplot.locator = function (ndc, object = last_plot(), message = FALSE, xexpand = c(0.05, 0), yexpand = c(0.05, 0)) {
xrng <- with(object, range(data[, deparse(mapping$x)]))
yrng <- with(object, range(data[, deparse(mapping$y)]))
xrng <- scales::expand_range(range = xrng, mul = xexpand[1],
add = xexpand[2])
yrng <- scales::expand_range(range = yrng, mul = yexpand[1],
add = yexpand[2])
point <- data.frame(xrng[1] + ndc$x * diff(xrng), yrng[1] +
ndc$y * diff(yrng))
names(point) <- with(object, c(deparse(mapping$x), deparse(mapping$y)))
point
}
ndc = list(x=0.5, y=0.5)
ndc
ndc$x
ndc$y
ggplot.locator(ndc, ggp)
ggplot.locator(list(x=0.0, y=1.0), ggp)
identify_handler <- function(widget, playState) {
print(widget)
print(playState)
assign("last.widget", widget, envir = .GlobalEnv)
assign("last.playState", playState, envir = .GlobalEnv)
# lnInfo <- playLineInput(playState)
ptInfo <- playPointInput(playState, prompt =
paste("Click to identify point,",
"Right-click to cancel."))
assign("ptInfo", ptInfo, envir = .GlobalEnv)
if (is.null(ptInfo)) {
print("Nothing clicked")
return()
}
print("ptInfo:")
print(ptInfo)
print("calculation data point:")
# pre: ggp should be filled with the same ggplot-object
data.point = ggplot.locator(ptInfo$ndc, ggp)
}
identifyTool <- list("MyIdentify", "gtk-indent", "MyIdentify",
callback = identify_handler)
ggp = qplot(xvar, yvar, data = df)
library(playwith)
library(ggplot2)
library(RGtk2)
playwith(qplot(xvar, yvar, data = df), tools = list(identifyTool))
identify_handler <- function(widget, playState) {
print(widget)
print(playState)
assign("last.widget", widget, envir = .GlobalEnv)
assign("last.playState", playState, envir = .GlobalEnv)
# lnInfo <- playLineInput(playState)
ptInfo <- playPointInput(playState, prompt =
paste("Click to identify point,",
"Right-click to cancel."))
assign("ptInfo", ptInfo, envir = .GlobalEnv)
if (is.null(ptInfo)) {
print("Nothing clicked")
return()
}
# printen ptInfo gaat fout, dan knalt 'ie uit de functie.
#print("ptInfo:")
#print(ptInfo)
# pre: ggp should be filled with the same ggplot-object
data.point = ggplot.locator(ptInfo$ndc, ggp)
assign("last.data.point", data.point, envir = .GlobalEnv)
print("calculation data point:")
print(data.point)
}
identifyTool <- list("MyIdentify", "gtk-indent", "MyIdentify",
callback = identify_handler)
fix(identifyTool)
playwith(qplot(xvar, yvar, data = df), tools = list(identifyTool))
rstudio::viewData(last.data.point)
fix(ptInfo)

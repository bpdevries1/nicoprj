cmdhistory=["(+ 1 1)" "(defn foo [a] (inc a))" "(ns-publics)" "(ns-publics *ns*)" "(defn bar\\n  [a b])" "(defn bar\\n  [a b]\\n  (+ a b))" "(bar 4 5)" "xxx" ";; Switching to startingclojure.app namespace" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(app {\:uri \\"/hello\\"})" "*ns*" "(pprint 1)" "(app {\:a 1 \:b 2})" "(def server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "(defonce server (jetty/run-jetty \#'app {\:port 8080 \:join? false}))" "clojure.tools.nrepl.middleware.interruptible-eval" "counter" "(def counter (atom 10000))" "(defn shorten\\n  [url]\\n  (let [id (swap\! counter inc)\\n        id (Long/toString id 36)]\\n    id))\\n" "(defn homepage \\n  [request])\\n" "(defn redirect \\n  [id]\\n  id)\\n" "(defn redirect \\n  [id]\\n  (str id id))\\n" "counter" "(swap\! counter inc)" "counter" "(pprint counter)" "(reset\! counter 10000)" "(shorten \\"\\")" "(defn shorten\\n  [url]\\n  (let [id (swap\! counter inc)\\n        id (Long/toString id 36)]\\n    (swap\! urls assoc id url)\\n    id))" "(defonce urls (atom {}))" "(defn shorten\\n  [url]\\n  (let [id (swap\! counter inc)\\n        id (Long/toString id 36)]\\n    (swap\! urls assoc id url)\\n    id))" "(defonce counter (atom 10000))" "(defonce urls (atom {}))" "(defn shorten\\n  [url]\\n  (let [id (swap\! counter inc)\\n        id (Long/toString id 36)]\\n    (swap\! urls assoc id url)))" "(shorten \\"http\://clojurebook.com\\")" "(shorten \\"http\://clojurebooks.com\\")" "(defn shorten\\n  [url]\\n  (let [id (swap\! counter inc)\\n        id (Long/toString id 36)]\\n    (swap\! urls assoc id url)\\n    id))" "(shorten \\"http\://clojure.org\\")" "urls" "(defn homepage \\n  [request]\\n  (str @urls)" "(defn homepage \\n  [request]\\n  (str @urls))" "(@urls \\"7px\\")" "(defn redirect \\n  [id]\\n  (response/redirect (@urls id)))" "(ns startingclojure.app\\n  (\:use (compojure handler\\n                   [core \:only (GET POST defroutes)]))\\n  (\:require [ring.util.response \:as response] \\n            [ring.adapter.jetty \:as jetty])\\n  (\:use clojure.pprint))" "(defn redirect \\n  [id]\\n  (response/redirect (@urls id)))" "(ns startingclojure.app\\n  (\:use (compojure handler\\n                   [core \:only (GET POST defroutes)]))\\n  (\:require [net.cgrand.enlive-html \:as en] \\n            [ring.util.response \:as response] \\n            [ring.adapter.jetty \:as jetty])\\n  (\:use clojure.pprint))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(defroutes app \\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(defonce server (jetty/run-jetty \#'app {\:port 8080 \:join? false})))" "urls" "(shorten \\"http\://microsoft.com\\")" "urls" "(defroutes app \\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (pprint request))\\n;        (let [id (shorten (-> request \:params \:url))]\\n;          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(defroutes app \\n  (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (pprint request))\\n;        (let [id (shorten (-> request \:params \:url))]\\n;          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(defroutes app \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n;        (pprint request))\\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "urls" "(defroutes app \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (pprint request))\\n;        (let [id (shorten (-> request \:params \:url))]\\n;          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(defroutes app \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (with-out-str (pprint request)))\\n;        (let [id (shorten (-> request \:params \:url))]\\n;          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(defroutes app \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        {\:status 200\\n         \:body (with-out-str\\n           (pprint request))})\\n        \#_(let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\"))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(defroutes app \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (GET \\"/shorten\\" request \\n        {\:status 200\\n         \:body (with-out-str\\n           (pprint request))})\\n        \#_(let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\"))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (GET \\"/shorten\\" request \\n        {\:status 200\\n         \:body (with-out-str\\n           (pprint request))})\\n        \#_(let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\"))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def app (compojure.handler/site app*))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        {\:status 200\\n         \:body (with-out-str\\n           (pprint request))})\\n        \#_(let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\"))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        {\:status 200\\n         \:body (with-out-str\\n           (pprint request))})\\n        \#_(let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\"))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def app (compojure.handler/site app*))" "(defn app-old\\n  [request]\\n  {\:status 200\\n   \:body (with-out-str\\n           (pprint request))})" "(defn redirect \\n  [id]\\n  (response/redirect (@urls id)))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def app (compojure.handler/site app*))" "urls" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  )" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s\: %s\\" id url))\\n                                ))" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def app (compojure.handler/site app*))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s\: %s\\" id url))\\n                                ))" "@urls" "(homepage)" "(homepage nil)" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s\: %s\\" id url))))" "(homepage nil)" "(swap\! urls dissoc \\"7pu\\")" "(defn redirect \\n  [id]\\n  (response/redirect (@urls id)))" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def app (compojure.handler/site app*))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s \=> %s\\" id url))\\n                                [\:a] (en/set-attr \:href (str \\\\/ id))))" "(str \\"/\\" 23)" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s \=> %s\\" id url))\\n                                [\:a] (en/set-attr \:href (str \\"/\\" id))))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s \=> %s\\" id url))\\n                                [\:a] (en/set-attr \:href (str \\"//\\" id))))" "(en/deftemplate homepage \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                                [\:a] (en/content (format \\"%s \=> %s\\" id url))\\n                                [\:a] (en/set-attr \:href (str \\"/\\" id))))" "(defn redirect \\n  [id]\\n  (response/redirect (@urls id)))" "(en/deftemplate homepage-old \\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (fn [e] (update-in e [\:content] str \\" * click here*\\"))\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (fn [e] (update-in e [\:content] str \\" *click here*\\"))\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (fn [e] (update-in e [\:content] conj \\" *click here*\\"))\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(defn redirect \\n  [id]\\n  (response/redirect (@urls id)))" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (compojure.route/resources \\"/\\")\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(ns startingclojure.app\\n  (\:use (compojure handler\\n                   [core \:only (GET POST defroutes)]))\\n  (\:require compojure.route\\n            [net.cgrand.enlive-html \:as en] \\n            [ring.util.response \:as response] \\n            [ring.adapter.jetty \:as jetty])\\n  (\:use clojure.pprint))" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (compojure.route/resources \\"/\\")\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(en/deftemplate homepage\\n  (en/xml-resource \\"homepage.html\\")\\n  [request]\\n  ; listing hier is case sensitive, moet in html ook zelfde zijn\!\\n  [\:\#listing \:li] (en/clone-for [[id url] @urls]\\n                     [\:a] (comp\\n                            (en/content (format \\"%s <\=> %s\\" id url))\\n                            (en/set-attr \:href (str \\"/\\" id)))))" "(defroutes app* \\n ; (POST \\"/\\" request (pprint request))\\n  (compojure.route/resources \\"/\\")\\n  (GET \\"/\\" request (homepage request)) ; request is hier de ring-request\\n  (POST \\"/shorten\\" request \\n        (let [id (shorten (-> request \:params \:url))]\\n          (response/redirect \\"/\\")))\\n  (GET \\"/\:id\\" [id] (redirect id)))" "(def app (compojure.handler/site app*))"]
eclipse.preferences.version=1
